#+TITLE: Hernan's Emacs Config
#+AUTHOR: Hernan Saez (hhsaez)
#+DESCRIPTION: Hernan's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:4

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#automatically-revert-buffers-for-changed-files][AUTOMATICALLY REVERT BUFFERS FOR CHANGED FILES]]
- [[#backup-files][BACKUP FILES]]
- [[#cc-programming][C/C++ PROGRAMMING]]
- [[#clang-format][CLANG-FORMAT]]
- [[#cmake][CMAKE]]
- [[#company][COMPANY]]
- [[#dashboard][DASHBOARD]]
- [[#diminish][DIMINISH]]
- [[#dired][DIRED]]
- [[#fixing-esc-key][FIXING ESC KEY]]
- [[#flycheck][FLYCHECK]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#starting-frame-size][Starting frame size]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#golden-ratio][GOLDEN RATIO]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#markdown-mode][MARKDOWN MODE]]
- [[#modeline][MODELINE]]
- [[#neotree][NEOTREE]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric indent]]
  - [[#allow-inline-images-to-be-resized][Allow inline images to be resized]]
- [[#os-specific][OS SPECIFIC]]
  - [[#macos][MacOS]]
  - [[#windows][Windows]]
- [[#perspective][PERSPECTIVE]]
- [[#projectile][PROJECTILE]]
- [[#remembering-the-last-place-you-visited-in-a-file][REMEMBERING THE LAST PLACE YOU VISITED IN A FILE]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
- [[#solair][SOLAIR]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#themes][THEMES]]
- [[#trim-whitespaces-before-saving][TRIM WHITESPACES BEFORE SAVING]]
- [[#visuals][VISUALS]]
- [[#which-key][WHICH-KEY]]
- [[#future-work][FUTURE WORK]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager
The following code was extract as-is from Elpaca README.md file
#+BEGIN_SRC emacs-lisp
    (defvar elpaca-installer-version 0.5)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                  :ref nil
                                  :files (:defaults (:exclude "extensions"))
                                  :build (:not elpaca--activate-package)))
    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
           (build (expand-file-name "elpaca/" elpaca-builds-directory))
           (order (cdr elpaca-order))
           (default-directory repo))
      (add-to-list 'load-path (if (file-exists-p build) build repo))
      (unless (file-exists-p repo)
        (make-directory repo t)
        (when (< emacs-major-version 28) (require 'subr-x))
        (condition-case-unless-debug err
            (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                     ((zerop (call-process "git" nil buffer t "clone"
                                           (plist-get order :repo) repo)))
                     ((zerop (call-process "git" nil buffer t "checkout"
                                           (or (plist-get order :ref) "--"))))
                     (emacs (concat invocation-directory invocation-name))
                     ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                           "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                     ((require 'elpaca))
                     ((elpaca-generate-autoloads "elpaca" repo)))
                (progn (message "%s" (buffer-string)) (kill-buffer buffer))
              (error "%s" (with-current-buffer buffer (buffer-string))))
          ((error) (warn "%s" err) (delete-directory repo 'recursive))))
      (unless (require 'elpaca-autoloads nil t)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" repo)
        (load "./elpaca-autoloads")))
    (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil :demand t)

  ;;Turns off elpaca-use-package-mode current declartion
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  (elpaca nil (message "deferred"))
#+END_SRC

* ALL THE ICONS
 This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+END_SRC

* AUTOMATICALLY REVERT BUFFERS FOR CHANGED FILES

Revert buffers when the underlying file has changed.

#+BEGIN_SRC emacs-lisp

(global-auto-revert-mode 1)

#+END_SRC

* BACKUP FILES

By default, Emacs creates automatic backups of opened files in their original directories, leading to a lot of clutter. Let's disable backfiles files (an alternative could be to tell Emacs to store backups in a different directory...)
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

* C/C++ PROGRAMMING

#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4
                tab-width 4
                indent-tabs-mode nil)

  (defun my-c-mode-common-hook ()
    (progn
      (c-add-style "mine" '("stroustrup"
                            (c-offsets-alist
                             (substatement-open . 0)
                             (statement-cont . 0)
                             (innamespace . +)
                             (inline-open . 0)
                             (inlambda . 0)
                             (inher-cont . c-lineup-multi-inher)
                             (arglist-intro . +)
                             (arglist-cont-nonempty . 0)
                             (arglist-close . 0)
                             (case-label . +)
                             (template-args-cont . 0))))
      (setq c-default-style "mine")
      (c-set-style "mine")))
    (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+END_SRC

Ensure that compilation buffer scrolls to the bottom

#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output t)
#+END_SRC

Jump between compilation errors, ignoring warnings

#+BEGIN_SRC emacs-lisp
(setq compilation-skip-threshold 2)
#+END_SRC

* CLANG-FORMAT

#+BEGIN_SRC emacs-lisp
  (use-package clang-format
    :ensure t
    :config
    (setq clang-format-style "file"))

  (defun clang-format-buffer-smart ()
    "Reformat buffer if .clang-format exists in the projectile root."
    (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
      (clang-format-buffer)))

  (defun clang-format-buffer-smart-on-save ()
    "Add auto-save hook for clang-format-buffer-smart."
    (add-hook 'before-save-hook 'clang-format-buffer-smart nil t))

  ;; Run this for each mode you want to use the hook.
  (add-hook 'c-mode-hook (lambda () (clang-format-buffer-smart-on-save)))
  (add-hook 'c++-mode-hook (lambda () (clang-format-buffer-smart-on-save)))
  (add-hook 'glsl-mode-hook (lambda () (clang-format-buffer-smart-on-save)))
#+END_SRC

* CMAKE

#+BEGIN_SRC emacs-lisp
(org-babel-load-file
 (expand-file-name
  "cmake-utils.org"
  user-emacs-directory))
#+END_SRC

* COMPANY
Company is a text completion framework for Emacs. The name stands for "complete anything". Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .4)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+END_SRC

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Fly Me To The Moon!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner (concat user-emacs-directory "wallpaper.png")) ;; use custom image
    (setq dashboard-image-banner-max-height 480)
    (setq dashboard-center-content t) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 10)
                            (agenda . 5)
                            (bookmarks . 3)
                            (projects . 3) ;; Requires "projectile"
                            (registers .. 3)))
    :config
    ;;    (dashboard-modify-heading-icons '((recents . "file-text")
    ;;                                    (bookmarks . "book")))
    (dashboard-setup-startup-hook))
#+END_SRC

* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-mode. With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+BEGIN_SRC emacs-lisp
  (use-package diminish)
#+END_SRC

* DIRED

Use peep-dired to look at file contents as we moved in dired mode

#+BEGIN_SRC emacs-lisp
  (use-package peep-dired
    :after dired)
#+END_SRC

TODO: Enable *peep-dired* by default

* FIXING ESC KEY

By default Emacs will close all windows when pressing the ESC key. I hate that.

Instead, map the ESC key to keyboard-escape-quit (C-g) instead

#+BEGIN_SRC emacs-lisp
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
#+END_SRC

In addition, this seems to make the minibuffer to exit with just one ESC key press (instead of ESC ESC ESC by default)

* FLYCHECK
Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs, intended as replacement of the older Flymake extension which is part of GNU Emacs. More information at: https://www.flycheck.org/en/latest/

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish ;; don't show minor mode in modeline
    :init (global-flycheck-mode)
    (setq flycheck-gcc-language-standard "c++20")
    (setq flycheck-gcc-args "-std=c++20")
    (setq flycheck-clang-language-standard "c++20")
    (setq flycheck-clang-args "-std=c++20"))
#+END_SRC

On MacOS, also add the following to fix your $PATH environment variable

#+BEGIN_SRC emacs-lisp
  ;;(use-package exec-path-from-shell)
  ;;(exec-path-from-shell-initialize)
#+END_SRC

* FONTS
Defining the various fonts that Emacs will use.

** Setting the Font Face
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :font "JetBrains Mono"
                      :height 130
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "Ubuntu"
                      :height 140
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono"
                      :height 130
                      :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-14"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.15)
#+END_SRC

** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.
#+BEGIN_SOURCE emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+END_SOURCE

* GRAPHICAL USER INTERFACE TWEAKS
Let's make GPU Emacs look a little better

** Starting frame size
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(height . 50))
(add-to-list 'default-frame-alist '(width . 120))
#+END_SRC

** Disable Menubar, Toolbars and Scrollbars
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Display Line Numbers and Truncated Lines
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq-default truncate-lines nil)
#+END_SRC

* GOLDEN RATIO

Use `golden-ratio-toggle-widescreen` if splits are too wide

Note: Seems this package is no longer actively maintained...

#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :ensure t
    :custom
    (golden-ratio-mode 1))
#+END_SRC

* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.
+ Ivy-Prescient is a simple and effective sorting and filtering tool for Emacs.

#+BEGIN_SRC emacs-lisp
     (use-package counsel
       :after ivy
       :config (counsel-mode))

    (use-package ivy
      :bind
      ;; ivy-resume resumes the last Ivy-based completion.
      (("C-c C-r" . ivy-resume)
       ("C-x B" . ivy-switch-buffer-other-window))
      :custom
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)
      :config
      (ivy-mode))

    (use-package all-the-icons-ivy-rich
      :ensure t
      :init (all-the-icons-ivy-rich-mode 1))

    (use-package ivy-rich
      :after ivy
      :ensure t
      :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
      :custom
      (ivy-virtual-abbreviate 'full
                              ivy-rich-switch-buffer-align-virtual-buffer t
                              ivy-rich-path-style 'abbrev))

  (use-package ivy-prescient
    :after ivy
    :ensure t
    :init (ivy-prescient-mode 1)
    )
#+END_SRC


When entering a string which is not on the list of candidates but matches a substring of one of them, Ivy prevents us from selecting our prompt, forcing us to use the suggested one.
By enabling this setting, we can press the up arrow (or C-p) when on the first candidate to select the contents of the prompt line.
#+BEGIN_SRC emacs-lisp
  (setq-default ivy-use-selectable-prompt t)
#+END_SRC

* MARKDOWN MODE
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC

* MODELINE

The modeline is the bottom status bar that appears in Emacs windows.

Doom Emacs already has a nice modeline package available, saving us some work.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 40
          ;; sets left bar width
          doom-modeline-bar-width 5
          ;; adds perspective name to modelinep
          doom-modeline-persp-name t
          ;; adds folder icon next to persp mode
          doom-modeline-persp-icon t))
#+END_SRC

* NEOTREE

Neotree is a file tree viewer.

NeoTree provides folliwng themes: classic, ascii, arrow, icons and nerd. Theme can be configured by setting "two" themes for neo-theme: one for the GUI and one for the terminal.

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :config
    (setq neo-smart-open t ; allows jumping to the current file
          neo-show-hidden-files t
          neo-window-width 55
          neo-window-fixed-size nil ; makes width to be adjustable
          inhibit-compacting-font-caches t
          projectile-switch-project-action 'neotree-projectile-action)
    ;; truncate long file names in neotree
    (add-hook 'neo-after-create-hook
              #'(lambda (_)
                  (with-current-buffer (get-buffer neo-buffer-name)
                    (setq truncate-lines t)
                    (setq word-wrap nil)
                    (make-local-variable 'auto-hscroll-mode)
                    (setq auto-hscroll-mode nil)))))
#+END_SRC

* ORG MODE
** Enabling Table of Contents
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Disable Electric indent
Org mode source blocks have some really weird and annoying default indentation behavior. It seems to be caused
by electric-indent-mode turned on by default in Emacs. Let's turn it off.

#+BEGIN_SRC emacs-lisp
  (electric-indent-mode -1)
#+END_SRC

** Allow inline images to be resized
If set to nil, org will try to get the width from an #+ATTR* keyword and fall back to the original image width if none is found
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

* OS SPECIFIC

** MacOS

#+BEGIN_SRC emacs-lisp
  (when (equal system-type 'darwin)
    ;; (setq mac-option-modifier 'super)
    ;; (setq mac-command-modifier 'meta)
    (setq ns-auto-hide-menu-bar nil)
    (setq ns-use-proxy-icon nil)
    (setq dired-use-ls-dired nil)
    (setq initial-frame-alist
          (append
           '((ns-transparent-titlebar . t)
             (ns-appearance .dark)
             (vertical-scroll-bar . nil)
             (internal-border-width . 0)))))
#+END_SRC

** Windows

Set ssh_askpass to the proper executable
#+BEGIN_SRC emacs-lisp
(setenv "SSH_ASKPASS" "c:/Program Files/Git/mingw64/libexec/git-core/git-askpass.exe")
#+END_SRC

* PERSPECTIVE

TODO

* PROJECTILE
Projectile is a project interaction library for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish
    :init
    (setq projectile-keymap-prefix (kbd "C-c p"))
    :config
    (projectile-global-mode)
    (setq projectile-enable-caching t)
    (projectile-mode 1))
#+END_SRC

* REMEMBERING THE LAST PLACE YOU VISITED IN A FILE

Remember and restore the last cursor location of opened files

#+BEGIN_SRC emacs-lisp

(save-place-mode 1)

#+END_SRC

* SHELLS AND TERMINALS

** Eshell
Eshell is an Emacs 'shell' that is written in Elisp.

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

* SOLAIR

#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :ensure t
    :custom
    (solaire-global-mode 1))
#+END_SRC

* RELOAD EMACS
Use this function to reload Emacs after adding changes to the config.

#+BEGIN_SRC emacs-lisp
(defun reload-init-file ()
(interactive)
(load-file user-init-file)
(load-file user-init-file))
#+END_SRC

* THEMES

Designates the directory where will place all of our themes.
Now, select our chosen theme, which is *hhsaez* by default, a theme that I created with the help of Emacs Theme Editor.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  ;;(load-theme 'hhsaez t)
#+END_SRC

Also, install themes from *doom-themes* so we can switch to a different one if we want to
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; overrides default theme
    (load-theme 'doom-one t)
    ;; Enable custom neotree theme (all-the-icons must be installed)
    (doom-themes-neotree-config)
    ;; Corrects and improves org-mode's native fontification
    (doom-themes-org-config))
#+END_SRC

* TRIM WHITESPACES BEFORE SAVING

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* VISUALS

#+BEGIN_SRC emacs-lisp
  (setq-default
   ;; By default, Emacs will try to resize itself to specific column size. This is not ideal when using a tiling window manager.
   frame-inhibit-implied-resize t
  )
#+END_SRC

* WHICH-KEY
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :diminish
    :config
    (setq which-key-side-window-location 'bottom
            which-key-sort-order #'which-key-key-order-alpha
            which-key-sort-uppercase-first nil
            which-key-add-column-padding 1
            which-key-max-display-columns nil
            which-key-min-display-lines 6
            which-key-side-window-slot -10
            which-key-side-window-max-height 0.25
            which-key-idle-delay 0.8
            which-key-max-description-length 25
            which-key-allow-imprecise-window-fit t
            which-key-separator " → " ))
#+END_SRC

* FUTURE WORK

- [ ] Move things like Elpaca config to their own files.
- [ ] Fix MacOS tiling issues.
- [ ] Fix Windows eshell and git issues.

#+TITLE: Hernan's CMake Utils for Emacs
#+AUTHOR: Hernan Saez (hhsaez)
#+DESCRIPTION: Provides utilities for configuring, building and testing CMake projects
#+STARTUP: showeverything
#+OPTIONS: toc:4

* TABLE OF CONTENTS :toc:
- [[#configure][CONFIGURE]]
- [[#build-target-selection][BUILD TARGET SELECTION]]
- [[#build][BUILD]]
- [[#run][RUN]]
- [[#test][TEST]]

* CONFIGURE

This section defines a function to configure CMake projects in Emacs.

#+BEGIN_SRC emacs-lisp
  (defvar cmake-default-build-dir "build"
    "Default directory for CMake build files within a project.")

  (defun cmake-configure-project ()
    "Configure a CMake project using Projectile to find the project root."
    (interactive)
        (require 'projectile)
        (let* ((project-root (projectile-project-root))
               (build-dir (concat project-root (or cmake-default-build-dir "build"))))
          (if project-root
              (progn
                (unless (file-directory-p build-dir)
                  (make-directory build-dir))
                (let ((default-directory project-root))
                  (compile (format "cmake -S %s -B %s" project-root build-dir))))
            (message "No Projectile project found or no CMakeLists.txt in the project root."))))
#+END_SRC

* BUILD TARGET SELECTION

#+BEGIN_SRC emacs-lisp
  (defvar cmake-selected-target nil
    "The currently selected CMake build target.")

  (defun cmake-select-build-target ()
    "Select a build target from the CMake cache and store it for later use."
    (interactive)
    (message "New version of cmake-select-target is running")
    (require 'projectile)
    (let* ((project-root (projectile-project-root))
           (build-dir (concat project-root (or cmake-default-build-dir "build")))
           (cache-file (concat build-dir "/CMakeCache.txt"))
           (targets (condition-case err
                        (cmake-extract-targets build-dir)
                      (error
                       (message "Error extracting targets: %s" err)
                       nil)))) ;; Handle extraction errors
      (setq cmake-selected-target
            (if (and targets (not (null targets)))
                ;; If targets are found, offer a choice
                (completing-read "Select a taret: " targets nil t)
              ;; Otherwise, prompt for manual input
              (read-string "No targets found. Enter a target name manually: ")))
        (message "Selected target: %s" cmake-selected-target)))

  ;; Helper function to extract targets
  (defun cmake-extract-targets (build-dir)
    "Extract build targets from the CMake cache in BUILD-DIR."
    (let ((cmake-file-api-dir (concat build-dir "/.cmake/api/v1/reply"))
          (targets nil))
      (if (file-directory-p cmake-file-api-dir)
          (progn
            (dolist (file (directory-files cmake-file-api-dir t ".*\\.json$"))
              (with-temp-buffer
                (insert-file-contents file)
                (goto-char (point-min))
                (while (re-search-forward "\"name\":\\s-*\"\\(.*?\\)\"" nil t)
                  (push (match-string 1) targets))))
            (delete-dups targets))
        (message "CMake file API directory not found. Ensure CMake is configured with file API support."))
      targets)) ;; Return nil if no targets are found
#+END_SRC

* BUILD

#+BEGIN_SRC emacs-lisp
  (defun cmake-build-target ()
    "Build the currently selected CMake target."
    (interactive)
    (require 'projectile)
    (let* ((project-root (projectile-project-root))
           (build-dir (concat project-root (or cmake-default-build-dir "build")))
           (target-name (if (and cmake-selected-target
                                 (not (string-empty-p cmake-selected-target)))
                            cmake-selected-target
                          (read-string "No target selected. Enter target name: "))))
      (setq cmake-selected-target target-name) ;; Save the manual input for reuse
      (if (and target-name (not (string-empty-p target-name)))
          (compile (format "cmake --build %s --target %s" build-dir target-name))
        (message "No valid target selected. Use `cmake-select-build-target` to choose a target."))))
#+END_SRC

* RUN

#+BEGIN_SRC emacs-lisp
  (defun cmake-run-target()
  "Run the executable for the currently selected CMake target or custom path."
  (interactive)
  (require 'projectile)
  (let* ((project-root (projectile-project-root))
         (build-dir (concat project-root (or cmake-default-build-dir "build")))
         (target-name cmake-selected-target)
         (default-executable (when target-name
                                (cmake-find-executable build-dir target-name)))
         (executable (or default-executable
                         (read-file-name "Executable not found. Specify manually: " build-dir))))
    (message "Running: %s" executable)
    (async-shell-command executable "*CMake Target Output*")))

  (defun cmake-find-executable (build-dir target-name)
    "Recursively search for the TARGET-NAME executable in BUILD-DIR."
    (let ((files (directory-files-recursively build-dir target-name)))
      ;; Return the first matching file that is executable
      (seq-find #'file-executable-p files)))
#+END_SRC

* TEST

1. Run All Tests
   - Call "M-x cmake-run-tests"
   - All tests are executed in the build directory
2. Run Specific Tests
   - Call "C-u M-x cmake-run-tests"
   - Enter the name or regex of the test(s) to run

#+BEGIN_SRC emacs-lisp
  (defun cmake-run-tests (&optional test-name)
    "Run CTest in the build directory. If TEST-NAME is provided, only that test will run."
    (interactive
     (list (if current-prefix-arg
               (read-string "Enter test name (regex): "))))
    (require 'projectile)
    (let* ((project-root (projectile-project-root))
           (build-dir (concat project-root (or cmake-default-build-dir "build")))
           (command (if test-name
                        (format "ctest -R %s --output-on-failure --stop-on-failure" test-name)
                      "ctest --output-on-failure --stop-on-failure")))
           (if (file-exists-p build-dir)
               (let ((default-directory build-dir))
                 (compile command))
             (message "Build directory '%s' does not exists. Did you configure the project?" build-dir))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun cmake-run-tests-for-target ()
    "Run CTest for tests associated with the currently selected build target.
  If no target is selected, prompt for manual input."
    (interactive)
    (require 'projectile)
    (let* ((project-root (projectile-project-root))
           (build-dir (concat project-root (or cmake-default-build-dir "build")))
           (target-name (or cmake-selected-target
                            (read-string "No target selected. Enter target name manually: ")))
           (test-pattern (read-string "Enter test name pattern (leave blank to use target name): "
                                       target-name))  ;; Default to target name
           (command (if (not (string-empty-p test-pattern))
                        (format "ctest -R %s --output-on-failure" test-pattern)
                      "ctest --output-on-failure")))
      (if (file-exists-p build-dir)
          (let ((default-directory build-dir))
            (compile command))
        (message "Build directory '%s' does not exist. Did you configure the project?" build-dir))))
#+END_SRC

#+RESULTS:
: cmake-run-tests-for-target
